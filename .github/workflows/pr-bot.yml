# .github/workflows/pr-bot.yml
name: PR Details Bot

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  generate-pr-details:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR changes
        id: changes
        run: |
          # Get the diff between base and head
          git diff origin/${{ github.base_ref }}...origin/${{ github.head_ref }} > changes.diff
          
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...origin/${{ github.head_ref }})
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate PR description with Gemini
        id: generate_description
        uses: actions/github-script@v7
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        with:
          script: |
            const fs = require('fs');
            // Read the diff
            const diff = fs.readFileSync('changes.diff', 'utf8');
            const changedFiles = `${{ steps.changes.outputs.changed_files }}`;

            // Prepare enhanced prompt for Gemini
            const prompt = `You are a technical PR description generator. Create a professional, well-formatted PR description using proper Markdown formatting.\n\nFORMATTING REQUIREMENTS:\n- Use ## for main title with relevant emoji\n- Use ### for section headers\n- Use - for bullet points\n- Use **bold** for emphasis\n- Use \`backticks\` for file names and technical terms\n- Use emoji icons for visual appeal (📋 🔧 ✨ 📁 🏷️ etc.)\n- Keep sections clear and organized\n\nREQUIRED SECTIONS:\n1. Title with emoji (## 🔧 [Feature Name])\n2. Summary (### 📋 Summary - brief overview)\n3. Changes Made (### ✨ Changes Made - detailed list with sub-bullets)\n4. Files Modified (### 📁 Files Modified - with file paths in backticks)\n5. Type of Change (### 🏷️ Type of Change - with checkboxes)\n6. Additional Notes if needed (### 📝 Additional Notes)\n\nChanged files:\n${changedFiles}\n\nCode diff:\n${diff.slice(0, 6000)}\n\nGenerate a professional, well-formatted PR description in Markdown:`;

            // Call Gemini API (using gemini-2.0-flash)
            const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                contents: [{
                  parts: [{
                    text: prompt
                  }]
                }]
              })
            });
            
            if (!response.ok) {
              const errorText = await response.text();
              console.error(`Gemini API error: ${response.status} - ${errorText}`);
              throw new Error(`Gemini API error: ${response.status} - ${errorText}`);
            }
            
            const data = await response.json();
            console.log('Gemini API Response:', JSON.stringify(data, null, 2));
            
            if (!data.candidates || !data.candidates[0] || !data.candidates[0].content || !data.candidates[0].content.parts) {
              console.error('Invalid Gemini response structure:', data);
              throw new Error('Invalid response from Gemini API');
            }
            
            const description = data.candidates[0].content.parts[0].text;
            
            return description;

      - name: Update PR description
        uses: actions/github-script@v7
        with:
          script: |
            const description = `${{ steps.generate_description.outputs.result }}`;
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: `${description}\n\n---\n*This description was automatically generated by PR Bot using Google Gemini*`
            });

      - name: Add PR labels based on changes
        uses: actions/github-script@v7
        with:
          script: |
            const changedFiles = `${{ steps.changes.outputs.changed_files }}`.split('\n').filter(file => file.trim());
            const labels = [];
            // Auto-label based on file types and content
            if (changedFiles.some(file => file.includes('test') || file.includes('spec'))) {
              labels.push('tests');
            }
            if (changedFiles.some(file => file.includes('doc') || file.endsWith('.md') || file.includes('README'))) {
              labels.push('documentation');
            }
            if (changedFiles.some(file => file.includes('frontend') || file.endsWith('.jsx') || file.endsWith('.tsx') || file.endsWith('.vue') || file.endsWith('.html') || file.endsWith('.css'))) {
              labels.push('frontend');
            }
            if (changedFiles.some(file => file.includes('backend') || file.includes('api') || file.includes('server') || file.endsWith('.py') || file.endsWith('.java') || file.endsWith('.go'))) {
              labels.push('backend');
            }
            if (changedFiles.some(file => file.includes('config') || file.endsWith('.yml') || file.endsWith('.yaml') || file.endsWith('.json') || file.includes('docker'))) {
              labels.push('configuration');
            }
            if (changedFiles.some(file => file.includes('migration') || file.includes('schema') || file.includes('database'))) {
              labels.push('database');
            }
            // Add size labels based on number of files changed
            if (changedFiles.length <= 2) {
              labels.push('size/XS');
            } else if (changedFiles.length <= 5) {
              labels.push('size/S');
            } else if (changedFiles.length <= 10) {
              labels.push('size/M');
            } else if (changedFiles.length <= 20) {
              labels.push('size/L');
            } else {
              labels.push('size/XL');
            }
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }

      - name: Add comment with analysis summary
        uses: actions/github-script@v7
        with:
          script: |
            const changedFiles = `${{ steps.changes.outputs.changed_files }}`.split('\n').filter(file => file.trim());
            const comment = `## 🤖 PR Analysis Summary\n\n**Files Changed:** ${changedFiles.length}\n**Analysis:** This PR has been automatically analyzed and labeled.\n\n**Changed Files:**\n${changedFiles.map(file => `- \`${file}\``).join('\n')}\n\n*Generated by PR Bot using Google Gemini AI*`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });